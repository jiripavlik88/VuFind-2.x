<?=$this->doctype('HTML5')?>
<html lang="<?=explode("-", $this->layout()->userLang)[0]?>">
<head>
    <?$this->headThemeResources()?>
    <meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width,initial-scale=1.0" />
    <?=$this->headMeta()?>
    <?=$this->headTitle()?>
    <?
      // Set up OpenSearch link:
      $this->headLink(
        array(
          'href' => $this->url('search-opensearch') . '?method=describe',
          'type' => 'application/opensearchdescription+xml',
          'title' => $this->transEsc('Library Catalog Search'),
          'rel' => 'search'
        )
      );
    ?>
    <!-- RTL styling -->
    <? if ($this->layout()->rtl) {
      $this->headLink()->appendStylesheet('vendor/bootstrap-rtl.min.css');
    } ?>
    <?=$this->headLink()?>
    <?=$this->headStyle()?>
    <?
      if (!isset($this->renderingError)) {
        // Add translation strings
        $this->jsTranslations()->addStrings(
          array(
            'bulk_email_success' => 'bulk_email_success',
            'bulk_noitems_advice' => 'bulk_noitems_advice',
            'bulk_save_success' => 'bulk_save_success',
            'close' => 'close',
            'go_to_list' => 'go_to_list',
            'libphonenumber_invalid' => 'libphonenumber_invalid',
            'libphonenumber_invalidcountry' => 'libphonenumber_invalidcountry',
            'libphonenumber_invalidregion' => 'libphonenumber_invalidregion',
            'libphonenumber_notanumber' => 'libphonenumber_notanumber',
            'libphonenumber_toolong' => 'libphonenumber_toolong',
            'libphonenumber_tooshort' => 'libphonenumber_tooshort',
            'libphonenumber_tooshortidd' => 'libphonenumber_tooshortidd',
            'loading' => 'Loading',
            'sms_success' => 'sms_success',
            'number_thousands_separator' => ['number_thousands_separator', null, ','],
            'in_titles' => 'in_titles',
            'in_authors' => 'in_authors',
            'in_subjects' => 'in_subjects',
            'citation_set_permanently' => 'citation_set_permanently',
            'records_per_page_set_permanently' => 'records_per_page_set_permanently',
            'default_sorting_set_permanently' => 'default_sorting_set_permanently'
          )
        );
        // Add libphonenumber.js strings
        $this->jsTranslations()->addStrings(
          array(
            "'Phone number invalid'" => 'libphonenumber_invalid',
            "'Invalid country calling code'" => 'libphonenumber_invalidcountry',
            "'Invalid region code'" => 'libphonenumber_invalidregion',
            "'The string supplied did not seem to be a phone number'" => 'libphonenumber_notanumber',
            "'The string supplied is too long to be a phone number'" => 'libphonenumber_toolong',
            "'The string supplied is too short to be a phone number'" => 'libphonenumber_tooshort',
            "'Phone number too short after IDD'" => 'libphonenumber_tooshortidd'
          )
        );
        // Deal with cart stuff:
        $cart = $this->cart();
        if ($cart->isActive()) {
          $this->headScript()->appendFile("vendor/cookies.js");
          $this->headScript()->appendFile("cart.js");
          $domain = $cart->getCookieDomain();
          $this->headScript()->appendScript(
            'var cartCookieDomain = ' . (!empty($domain) ? "'$domain'" : 'false') . ';'
          );
          $this->jsTranslations()->addStrings(
            array(
              'bulk_noitems_advice' => 'bulk_noitems_advice',
              'confirmDelete' => 'confirm_delete',
              'confirmEmpty' => 'bookbag_confirm_empty',
              'viewBookBag' => 'View Book Bag',
              'addBookBag' => 'Add to Book Bag',
              'removeBookBag' => 'Remove from Book Bag',
              'itemsAddBag' => 'items_added_to_bookbag',
              'itemsInBag' => 'items_already_in_bookbag',
              'bookbagMax' => $cart->getMaxSize(),
              'bookbagFull' => 'bookbag_full_msg',
              'bookbagStatusFull' => 'bookbag_full',
              'no_tags' => 'No Tags'
            )
          );
        }
        $this->headScript()->appendScript(
          'var userIsLoggedIn = ' . ($this->auth()->isLoggedIn() ? 'true' : 'false') . ';'
        );
      }

      // Session keep-alive
      if ($this->KeepAlive()) {
          $this->headScript()->appendScript('var keepAliveInterval = '
            . $this->KeepAlive());
          $this->headScript()->appendFile("keep_alive.js");
      }

        /*
        * This handles PerunShibboleth's Assertions returned by Shibboleth SP to easily detect returned attributes
        * This part checks if ShibAssertion export is enabled if [Shibboleth] config section & if it is, it gets those assertions
        */
        $authManager = $this->auth()->getManager();
        $assertionExportEnabled = false;
        $isActiveShibbolethIdentityManager = false;
        if ($authManager instanceof \CPK\Auth\Manager) {
            if ($authManager->getAuthMethod() === "PerunShibboleth") {
                $authMethod = $authManager->getAuthInstance("PerunShibboleth");

            } elseif($authManager->getAuthMethod() === "ShibbolethIdentityManager") {
                $authMethod = $authManager->getAuthInstance("ShibbolethIdentityManager");
                $isActiveShibbolethIdentityManager = true;
            }

            if ($authMethod && $authMethod->isShibAssertionExportEnabled()) {
                $assertions = $authMethod->getShibAssertions();

                if (!empty($assertions)) {
                    $assertionExportEnabled = true;
                }
            }
        }

        /*
         * Will we show the notifications ??
         */
        $user = $authManager->isLoggedIn();

        $libraryCards = [];
        
        $notificationsEnabled = false;

        if ($authManager instanceof \CPK\Auth\Manager) {
            $notificationsEnabled = $authManager->isNotificationSystemEnabled();     

            if ($notificationsEnabled) {
                
                $this->headScript()->appendFile("async-notifications.js");
                
                // Add notifications translations
                $this->jsTranslations()->addStrings(
                        array(
                            'you_have_blocks' => 'notif_you_have_blocks',
                            'you_have_fines' => 'notif_you_have_fines',
                            'you_have_overdues' => 'notif_you_have_overdues'
                        )
                        );
                
                /* Also check if the user have just logged in - in order to let 
                 * the __notif.sourcesRead know about it's state before last logout
                 */

                if(isSeT($_ENV['justLoggedIn'])) {
                
                    if ($_ENV['justLoggedIn'] === true) {
                        $this->headScript()->appendScript('$(function(){'
                                . '__notif.sourcesRead.init('
                                . $user->read_notifications . ') })');
                    }
                
                    unSeT($_ENV['justLoggedIn']);
                }
            }
        }
        
        if ($user) {
            $libraryCards = $user->getLibraryCards(false);
        }

        $headerParams = [
            'account' => $authManager,
            'user' => $user,
            'libraryCards' => $libraryCards,
            'notificationsEnabled' => $notificationsEnabled,
            'isActiveShibbolethIdentityManager' => $isActiveShibbolethIdentityManager
        ];
    ?>
    <?
      $root = rtrim($this->url('home'), '/');
      $translations = $this->jsTranslations()->getJSON();
      $dsb = DEFAULT_SEARCH_BACKEND;
      $setupJS = "var VuFind = new VuFindNamespace('{$root}', {$translations}, '{$dsb}');";
      $this->headScript()->appendScript($setupJS);
    ?>
    <?=$this->headScript()?>
  </head>
<body
	class="<?=$this->layoutClass('offcanvas-row')?><? if ($this->layout()->rtl): ?> rtl<? endif; ?>">
    <?=$this->render('cookies-agreement.phtml')?>
    <?=$this->render('info.phtml')?>
    <? // Set up the search box -- there are three possible cases:
      // 1. No search box was set; we should default to the normal box
      // 2. It was set to false; we should display nothing
      // 3. It is set to a custom string; we should display the provided version
      // Set up default search box if no data was provided from the template;
      // this covers case 1.  Cases 2 and 3 are then covered by logic below.
      if (!isset($this->layout()->searchbox)) {
        $this->layout()->searchbox = $this->render('search/searchbox.phtml');
      }
    ?>
    <header class="hidden-print">
		<div class="container navbar navbar-inverse">
			<div class="red-box">
				<a class="sr-only" href="#content"><?=$this->transEsc('Skip to content') ?></a>
          <?=$this->render('header.phtml', $headerParams)?>
        </div>
		</div>
		<div class="container">
          <? if ($this->layout()->searchbox !== false): ?>
          <div class="well clearfix">
          <?=$this->layout()->searchbox ?>

                <?
                /*
                * This handles PerunShibboleth's Assertions returned by Shibboleth SP to easily detect returned attributes
                * This part creates button to show/hide division containing messages, which is created later
                */
                if($assertionExportEnabled): ?>
                    <button id="shibAssertionHandler"
					class="btn btn-link" style="float: right"
					onclick="handleShibAssertion()">Show Shib Assertions</button>
				<script type="text/javascript">
                    function handleShibAssertion() {
                         var __display = document.getElementById('shibAssertionExport').style.display;
                         if (__display == 'block') {
                            document.getElementById("shibAssertionHandler").innerHTML = "Show Shib Assertions";
                            document.getElementById('shibAssertionExport').style.display = 'none';
                         } else {
                            document.getElementById("shibAssertionHandler").innerHTML = "Hide Shib Assertions";
                            document.getElementById('shibAssertionExport').style.display = 'block';
                         }
                    }
                    </script>
                <? endif; ?>

          </div>
          <? endif; ?>
      </div>

        <?
        /*
        * This handles PerunShibboleth's Assertions returned by Shibboleth SP to easily detect returned attributes
        * This part echoes messages to separate division to have it beautiful.
        */
        if($assertionExportEnabled): ?>
            <div class="container" id="shibAssertionExport"
			style="display: none">
			<div class="well clearfix">
            <? for($i = 0; $i < sizeof($assertions);) {
                $assertion = htmlentities($assertions[$i]);

                // Create new-lines between "><" char pairs
                $assertion = str_replace("&gt;&lt;", "&gt;<br />&lt;", $assertion);

                // Render it
                ?><h3>Assertion number <?=++$i?></h3><?=$assertion ?><?
            } ?>
            </div>
		</div>
        <? endif; ?>

    </header>
	<div role="main"
		class="main template-dir-<?=$this->templateDir?> template-name-<?=$this->templateName?>">
		<div class="container">
        <?=$this->layout()->content ?>
      </div>
	</div>
	<footer class="hidden-print">
		<div class="container">
        <?=$this->render('footer.phtml')?>
        <?=$this->layout()->poweredBy ?>
      </div>
	</footer>
	<!-- MODAL IN CASE WE NEED ONE -->
	<div id="modal" class="modal fade hidden-print" tabindex="-1"
		role="dialog" aria-labelledby="modalTitle" aria-hidden="true">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<button type="button" class="close" data-dismiss="modal"
						aria-hidden="true">&times;</button>
					<h4 id="modalTitle" class="modal-title">&nbsp;</h4>
				</div>
				<div class="modal-body"><?=$this->transEsc('Loading') ?>...</div>
			</div>
		</div>
	</div>
    <?=$this->piwik()?>
  </body>
</html>
